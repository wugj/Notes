View的位置参数
1、view的left、top、right、bottom是相对父容器的，是相对坐标
2、x、y是View的左上角坐标，translationX与translationY是View左上角相对于父容器的偏移量，默认值为0
3、x = left + translationX   y = top + translationY
4、注意 View在平移过程中top left表示原始左上角的位置信息，值不会发生改变，变化的是x、y、translationX、translationX，参考3

MotionEvent和TouchSlop（系统能识别的滑动的最小距离，常量与设备无关，不同设备值可能不同）
1、getX、getY是相对于当前View左上角的x和y坐标， getRawX、getRawY是相对于手机屏幕左上角的x、y坐标
2、touchSlop获取方式ViewConfiguration.get(getContext()).getScaledTouchSlop();

VelocityTracker(速度追踪)
1、VelocityTracker velocityTracker = VelocityTracker.obtain();  //追踪者
   velocityTracker.addMovement(event);
   velocityTracker.computeCurrentVelocity(1000); //1000ms内手指滑动的像素  速度带方向同x轴
   int xVelocity = (int) velocityTracker.getXVelocity(); //速度
   int yVelocity = (int) velocityTracker.getYVelocity();
   velocityTracker.clear();
   velocityTracker.recycle(); //回收

滑动三种方式
A、Scroll
    1、scrollBy和ScrollTo滑动的是View 的内容，View的位置不变， 本质是改变mScrollX和mScrollY的值来移动
    2、mScrollX总是等于View的左边缘和View内容左边缘的水平距离，mScrollY总是等于View的上边缘和View的内容上边缘的垂直方向距离
    3、内容左边缘 < View的左边缘 mScrollX为正，内容上边缘 < View的上边缘，mScrollY为正，即内容从右往左，从下往上为正值，反之为负值
B、使用动画 移动效果
    1、
C、改变LayoutParams重新布局

事件
1、public boolean dispatchTouchEvent(MotionEvent ev){
       boolean consume = false;
       if(onInterceptTouchEvent(ev)){
           consume = onTouchEvent(ev);
       } else {
            consume = child.dispatchTouchEvent(ev);
       }
       return consume;
   }
2、dispatchTouchEvent(MotionEvent ev)用来进行事件分发，如果事件能够传递给当前View，此方法一定调用，返回结果受当前View的OnTouchEvent和
        下级View的dispatchTouchEvent方法影响，表示是否消耗当前事件
    onInterceptTouchEvent(MotionEvent ev)判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列中，
        此方法不会再次被调用，返回结果表示是否拦截当前事件
    onTouchEvent(MotionEvent ev)在dispatchTouchEvent中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗
        在同一个事件序列中当前View无法再次接受到事件，在其中优先判断OnTouchListener，如果OnTouchListener返回true，
        OnTouchEvent不执行，OnclickListener优先级最低，该该方法在OnTouchEvent中被调用
3、如果ViewGroup一旦觉得拦截，那么此事件序列就只能由此View来处理，并且不会再次调用onInterceptTouchEvent
4、如果View的OnTouchEvent的DOWN事件返回false，那么此事件序列不会再交给他来处理，一旦返回true，不消耗除DOWN以为的事件，该事件将消失
        ，父类的OnTouchEvent不会被调用，并且View可以持续收到后续的事件，最终事件消失，交给Activity处理
5、ViewGourp默认不拦截事件，即OnterceptTouchEvent默认返回false
6、View没有OnterceptTouchEvent，直接提交给OnTouchEvent处理
7、事件是由外向内传递，requestDisallowInterceptTouchEvent方法可以在子元素干预父元素的事件分发，Down事件除外
8、viewGroup的dispatchTouchEvent在DOWN事件是必定会调用OnTerceptTouchEvent，如果此时确定拦截，将后续直接判断拦截不走OnterceptTouchEvent方法，
    当Down事件没有拦截的情况下，在事件序列中会判断子类是否调用requestDisallowInterceptTouchEvent的结果来判断是否走OnterceptTouchEvent方法
9、ViewGroup只有确定拦截才会走自己的onTouchEvent方法





