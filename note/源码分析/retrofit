1、建造者模式配置了calladapterfactory ConverterFactory（request， response）， 网络请求库（实现 okhttp3 的call 接口）默认okhttp3， 判断平台android
2、create 生成代理类， 调用方式时代理拦截调用
3、object方法  接口方法体（跳过 java8）
4、获取serviceMethod， 查找缓存，没有，开始解析
        1、根据返回类型获取calldapterfactory， cverterfactory
        2、根据方法注解，参数类型，参数注解生成网络请求信息
        3、保存到serviceMEthod
5、生成 retrofit的 OkHttpCall
6、调用calladapterfactory的adpt方法  rxjava拼接返回了CallEnqueueObservable 或者 CallExecuteObservable
7、observable订阅时调用了 subscribeActual
8、调用了网络请求，通过coverterfactoy转换了requst，返回值根据coverterfactory转化成我们需要的数据，发送出来



3、通过map 获取method解析后都结果集， 没有，开始解析
        a、根据method.getGenericReturnType()判断 callAdapter、coverAdapter
        b、解析注解
        c、生存method对应都serviceMethod放入集合map中      其中callfactory是直接使用配置的
        d、通过serviceMethod 生成OkHttpCall
        e、调用callAdapter都adapt（okhttpCall）


1、通过build的方式生成对象，其中可以加入知道的baseUrl，多个  返回类型callAdapter（RxJavaCallAdapterFactory ），
    多个 返回数据结构covertAdapter（GsonConverterFactory），实现callFactory接口的类（默认okHttp3）

1、代理模式拦截调用，查找methodHandle，没有找到构造methodHandle，通过读取方法的返回值，和返回值里的泛型，确定callAdapter和covertAdapter，
    读取注解生成requestfactory
2、构造okHttpCall,使用calladapter的adp方法调用（返回obserable.creat（）），
    在okhttpCall中通过callFactory和requestFactory，构造真实的call，并执行（本文走的okthhp3的网络调用）同步，返回结果中调用
    convertAdapter转换数据格式，返回给callAdapter，在返回给调用者
    
    
    附录：method.getDeclaringClass() 获取方法定义都类
         method.getGenericReturnType()获取方法返回类型
